// Generated by CoffeeScript 1.9.3
var COLORS, all_dicts, bulk_get_voronoi, connected, connection, ctx, draw_all, draw_polygon, drawn, i, j, key, local_events, offset, onchallenge, paint_style, painting, protocol, range_x, range_y, ref, ref1, ref2, ref3, room_data, room_events, s, to_fetch, user, wsuri, x, y;

console.log("Ok, AutobahnJS loaded", autobahn.version);

user = "joe";

key = "123";

connected = false;

s = false;

local_events = [];

room_data = {};

room_events = {};

COLORS = {
  "snow": "rgb(240,240,240)",
  "tundra": "rgb(221,221,187)",
  "bare": "rgb(187,187,187)",
  "scorched": "rgb(153,153,153)",
  "taiga": "rgb(204,212,187)",
  "shrubland": "rgb(196,204,187)",
  "temperate_desert": "rgb(228,232,202)",
  "temperate_rain_forest": "rgb(164,196,168)",
  "temperate_deciduous_forest": "rgb(180,201,169)",
  "grassland": "rgb(196,212,170)",
  "subtropical_desert": "rgb(233,221,199)",
  "temperate desert": "rgb(228,232,202)",
  "tropical_rainforest": "rgb(156,187,169)",
  "tropical_seasonal_forest": "rgb(169,204,164)",
  "ice": "rgb(30,250,250)",
  "water": "rgb(0,100,250)"
};

onchallenge = function(session, method, extra) {
  if (method === "ticket") {
    console.log("onchallenge: authenticating via '" + method + "' and challenge '" + extra.challenge + "'");
    return key;
  } else {
    throw "don't know how to authenticate using '" + method + "'";
  }
};

wsuri = '';

if (document.location.origin === "file://") {
  wsuri = "ws://127.0.0.1:8080/ws";
} else {
  if (document.location.protocol === "http:") {
    protocol = 'ws:';
  } else {
    protocol = 'wss:';
  }
  wsuri = protocol + "//" + document.location.host + "/ws";
}

connection = new autobahn.Connection({
  url: wsuri,
  realm: 'realm1',
  authmethods: ["ticket"],
  authid: user,
  onchallenge: onchallenge
});

offset = 600;

draw_polygon = function(voronoi) {
  var coord, coords, i, len, max_height, p, step, val;
  coords = voronoi.shape;
  ctx.strokeStyle = '#000000';
  max_height = 5;
  step = parseInt(255 / max_height);
  p = new Path2D();
  p.moveTo(coords[0][0] + offset, coords[0][1] + offset);
  for (i = 0, len = coords.length; i < len; i++) {
    coord = coords[i];
    p.lineTo(coord[0] + offset, coord[1] + offset);
  }
  p.lineTo(coords[0][0] + offset, coords[0][1] + offset);
  val = step * parseInt(voronoi.height);
  ctx.fillStyle = COLORS[voronoi.biome];
  if (voronoi.x_on_tilemap === 0 && voronoi.y_on_tilemap === 0) {
    ctx.fillStyle = 'red';
  }
  ctx.stroke();
  ctx.fill(p);
  return p.closePath();
};

drawn = [];

all_dicts = [];

draw_all = function() {
  var i, len, results, voronoi;
  results = [];
  for (i = 0, len = all_dicts.length; i < len; i++) {
    voronoi = all_dicts[i];
    results.push(draw_polygon(voronoi, voronoi.height));
  }
  return results;
};

bulk_get_voronoi = function(tuples) {
  var chunk, chunks, chunksize, i, len, results;
  console.log('requesting ' + tuples.length + 'voronoi cells');
  chunksize = 50;
  chunks = [];
  while (tuples.length > 0) {
    chunks.push(tuples.splice(0, chunksize));
  }
  results = [];
  for (i = 0, len = chunks.length; i < len; i++) {
    chunk = chunks[i];
    console.log('calling for chunk');
    results.push(s.call('com.game.bulk_get_voronoi', [chunk]).then(function(voronois) {
      var j, len1, v;
      console.log(voronois);
      for (j = 0, len1 = voronois.length; j < len1; j++) {
        v = voronois[j];
        all_dicts.push(v);
        drawn.push([v.x_on_tile, v.y_on_tile]);
        draw_all();
      }
    }, function(error) {
      return console.log("Call failed:", error);
    }));
  }
  return results;
};

range_x = [-30, 31];

range_y = [-30, 31];

to_fetch = [];

for (x = i = ref = range_x[0], ref1 = range_x[1]; i < ref1; x = i += 1) {
  for (y = j = ref2 = range_y[0], ref3 = range_y[1]; j < ref3; y = j += 1) {
    to_fetch.push([x, y]);
  }
}

connection.onopen = function(session, details) {
  console.log("connected session with ID " + session.id);
  console.log("authenticated using method '" + details.authmethod + "' and provider '" + details.authprovider + "'");
  console.log("authenticated with authid '" + details.authid + "' and authrole '" + details.authrole + "'");
  connected = true;
  s = session;
  bulk_get_voronoi(to_fetch);
};

connection.onclose = function(reason, details) {
  console.log("disconnected", reason, details.reason, details);
  connected = false;
};

ctx = canvas.getContext('2d');

painting = document.getElementById('paint');

paint_style = getComputedStyle(painting);

canvas.width = parseInt(paint_style.getPropertyValue('width'));

canvas.height = parseInt(paint_style.getPropertyValue('height'));

ctx.lineWidth = 1;

ctx.strokeStyle = '#00CC99';

console.log('connecting to ' + wsuri);

connection.open();

//# sourceMappingURL=map.js.map
